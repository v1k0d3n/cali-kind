#!/usr/bin/env bash
source ./cali-kind.env

# Create the Kind configuration based on our template (change ahead of time for customizations):
printf " \n"
printf "${BOLD_YELLOW}Writing \"kind-deployment.yaml\" based on the given environment variables: ${CLEAR} \n"
envsubst < ./configs-kind/kind-template.yaml | tee ./manifests/kind-deployment.yaml

# Create the Calico configuration for use with kind, based on our template:
printf " \n"
printf "${BOLD_YELLOW}Writing \"calico-deployment.yaml\" based on the given environment variables: ${CLEAR} \n"
envsubst < ./configs-calico/calico-template.yaml | tee ./manifests/calico-deployment.yaml

# Create the cluster based on our information generated above:
printf " \n"
printf "${BOLD_YELLOW}Creating kind cluster named \"${KIND_NAME_CLUSTER}\": ${CLEAR} \n"
kind create cluster --name ${KIND_NAME_CLUSTER} --config manifests/kind-deployment.yaml

# Source the other Kubernetes settings from our environment file before we continue on to other things:
# Showing the KinD clusters:
printf " \n"
printf "${BOLD_YELLOW}Showing all deployed KinD clusters: \n"
kind get clusters
source ./cali-kind.env
export KUBECONFIG="$(kind get kubeconfig-path --name="${KIND_NAME_CLUSTER}")"

# Show the cluster information:
printf " \n"
printf "${BOLD_YELLOW}Showing all deployed KinD clusters: \n"
kubectl cluster-info

# Debug information:
set -x
printf " \n"
printf "${BOLD_RED}Directory BEFORE running checks: \n"
ls -asl
pushd ./checks
./check-kind-node
./check-kube-proxy
./check-kube-scheduler
./check-kube-apiserver
popd
# Debug information:
printf " \n"
printf "${BOLD_RED}Directory AFTER running checks: \n"
ls -asl

# Create the cluster based on our information generated above:
# printf " \n"
# printf "${BOLD_YELLOW}Creating kind cluster named \"${KIND_NAME_CLUSTER}\": ${CLEAR} \n"
# kind create cluster --name ${KIND_NAME_CLUSTER} --config manifests/kind-deployment.yaml
